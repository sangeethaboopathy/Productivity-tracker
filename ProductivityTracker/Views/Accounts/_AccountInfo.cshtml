@model ProductivityTracker_Models.ViewModels.Dashboard.AccountInfoViewModel
@using ProductivityTracker_Models.Dto.Dashboard;
@using GridMvc.Html

@{ 
    Layout = null;
}

@*<link href="@Url.Content("~/Content/Gridmvc.css")" rel="stylesheet" />*@
<script src="@Url.Content("~/Scripts/gridmvc.min.js")"></script>

<div class="code-cut">
    @helper CustomRenderingOfStatusColumn(AccountInfoDto info)
    {
        if (info.Status == "New")
        {
            <button type="submit" value="@info.AccountId" onclick="pickAccount(@info.AccountId, 1)">Pick</button>
        }
        else if (info.Status == "Completed")
        {
            <button type="submit" disabled value="@info.AccountId">Completed</button>
        }
        else if (info.Status == "In Progress")
        {
            <button type="submit" value="@info.AccountId" onclick="showModal(@info.TimeLogId, @info.AccountId, 4)">Complete</button>
            <button type="submit" value="@info.AccountId" onclick="showModal(@info.TimeLogId, @info.AccountId, 3)">Pause</button>
        }
        else if (info.Status == "Paused")
        {
            <button type="submit" value="@info.AccountId" onclick="pickAccount(@info.AccountId, 1)">Resume</button>
        }
    }

    @helper CustomRenderingOfHistoryColumn(AccountInfoDto info)
    {
        if(info.ProgressHistory.Any())
        {
            var id="historyModal" + info.AccountId;
            <button value="@info.AccountId" onclick="showHistory(@id)">History</button>
        }
    }

    @{ 
        if (Model.Accounts != null)
        {
            @Html.Grid(Model.Accounts).Columns(
                columns =>
                {
                    columns.Add(model => model.CustomId).Titled("CID-AID").Filterable(true);
                    columns.Add(model => model.AccountName).Titled("Account Name").Filterable(true);
                    columns.Add(model => model.StartDate).Titled("Renewal Start Date").Filterable(true);
                    columns.Add(model => model.PickedBy).Titled("Picked By").Filterable(true);
                    columns.Add(model => model.PickedOn).Titled("Picked On");
                    columns.Add(model => model.Status).Titled("Status").Filterable(true);
                    columns.Add(model => model.AccountId).Titled("").Encoded(false).Sanitized(false).RenderValueAs(model => CustomRenderingOfStatusColumn(model));
                    columns.Add().Titled("").Encoded(false).Sanitized(false).RenderValueAs(model => CustomRenderingOfHistoryColumn(model));

                }).WithPaging(20).Named("gridInfo").Sortable(true);
        }
    }
</div>

<div id="commentsModal" class="modal" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">×</button>
                <h3 id="myModalLabel">Comments</h3>
            </div>
            <div class="modal-body">
                <input type="hidden" id="hdnTimeLogId" />
                <input type="hidden" id="hdnAccountId" />
                <input type="hidden" id="hdnUserId" />
                <input type="hidden" id="hdnStatusId" />
                Enter comments: <input type="text" id="txtComments" />
            </div>
            <div class="modal-footer">
                <button class="btn" data-dismiss="modal" aria-hidden="true">Close</button>
                <button class="btn btn-primary" data-dismiss="modal" onclick="completeAccount()">Save changes</button>
            </div>
        </div>
    </div>
</div>

@{
    foreach (var account in Model.Accounts)
    {
        if(account.ProgressHistory.Count() > 0)
        { 
            var modalId = "historyModal" + account.AccountId;
            <div id="@modalId" class="modal" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <button type="button" class="close" data-dismiss="modal">×</button>
                            <h3 id="myModalLabel">@account.AccountName</h3>
                        </div>
                        <div class="modal-body">
                            @Html.Grid(account.ProgressHistory).Columns(columns=>
                            {
                                columns.Add(model => model.UserName).Titled("Picked By");
                                columns.Add(model => model.StartTime).Titled("Start Time");
                                columns.Add(model => model.EndTime).Titled("End Time");
                                columns.Add(model => model.Status).Titled("Status");
                           })
                            @{ 
                                var timeSpentDetails = from historyDetails in account.ProgressHistory
                                    group historyDetails by historyDetails.UserName into detail
                                    select new
                                    {
                                        Assignee = detail.Key,
                                        TimeSpent = Convert.ToInt32(detail.Sum(x => x.EndTime!=null?(x.EndTime - x.StartTime).Value.TotalMinutes:
                                            (DateTime.UtcNow - x.StartTime).TotalMinutes))
                                    };

                                <span><h4>Time spent</h4></span>
                                @Html.Grid(timeSpentDetails).Columns(columns=>
                                {
                                    columns.Add(x=>x.Assignee).Titled("Asignee");
                                    columns.Add(x=>x.TimeSpent).Titled("Time Spent(In minutes)");
                                })
                            }
                        </div>
                        <div class="modal-footer">
                            <button class="btn" data-dismiss="modal" aria-hidden="true">Close</button>
                        </div>
                    </div>
                </div>
            </div>
        }
    }
}